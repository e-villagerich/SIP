SIP - Solar ICE Project

Introduction:

This project is called Solar Ice Project. It enables remote monitoring of every possible remote location that we can sell ice with the use of solar energy.
The goal of this project is to harness the power of solar technology to provide energy in remote locations where electricity is unreachable to run refrigerators. Thus,
providing means of freezing water in the form of ice in those areas and make them available in those remote locations. 


The Project:

This project is primarily composed of a "user" app and a master or admin app. The app is written in java through an android development environment. The data is kept and exchange through a cloud server based
architecture and the web service is called through a simple HTTP GET protocol. GET is chosen instead of POST to avoid buffering and eliminating the POST body sending from the app thus "simplifying" the communication to the cloud.
The data sent from the app is built upon a URI builder that gets its parameters on the type of request that the user/admin is calling and the final URL is sent to the cloud which gets interpreted. The server
will respond to the app in the form of a JSON format reply and gets parsed in the receiving end. Every request is created through a primitive data type array. Request to the cloud is sent asynchronously and is being processed on a background
thread different from the main thread. This is to avoid user interruption on the UI which is running on the main thread. 

Here are the types of request available for the app and their anatomy.

Login request: 
	The login request is built with REQUEST TYPE, TOKEN, USERNAME, PASSWORD, DATE. This is sent by crafting the URL from an array and get sent through POST. In the cloud server, the data is being interpreted
by means of request identification. The user information is getting queried from MYSQL database. To avoid SQL injection to the server, the query is being prepared and the parameters are being bind first before it is being executed. 
The result is sent to the app in the form JSON array which contains the TOKEN and the user profile information that determines the type of privilege the user has.
Logout request:















